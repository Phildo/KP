package {	//flash stuff	import flash.display.MovieClip;	import flash.events.*;	import flash.ui.*;	import flash.net.*;	import flash.utils.*;		//my stuff	import app.Pages;	import app.Profile;	import app.BPList;	import app.Cups;	//Other	import net.kaegi.loaders.VarLoader;	import net.eriksjodin.arduino.Arduino;	import net.eriksjodin.arduino.events.ArduinoEvent;		public class KPOS extends MovieClip{		//Variables		var profArray:Array;		var pZZ:Profile; //Team-0 Player-0 \		var pZO:Profile; //Team-0 Player-1   \ Current		var pOZ:Profile; //Team-1 Player-0   / Players		var pOO:Profile; //Team-1 Player-1 /		var firstGame:Boolean;		public static var serve:Boolean; //Use SharedObject (f) or MySQL (t)		public static var ardy:Boolean; //Is arduino attached?		var numBG:int;				//Temporary/Any Use Variables		var tempInt:int;		var tempStr:String;		var tempProf:Profile;				//Timer		var myTimer:Timer;				//State Variables		var pageNum:int; // 0-home, 1-list, 2-profile, 3-highScore, 4-stats		var homeSt:int; // 0-allowArrows, 1-disableArrows		var gcSt:int; // 0-Play, 1-Creds, 2-VS		var listSt:int; // 0-Main, 1-Password		var hsSt:int;		var profSt:int; // 0-name, 1-PW, 2-rPW, 3-enterToLeave		var statsSt:int; // 0-type, 1-refresh		var rankSt:int; //0-credits, 1-win/loss		var bg:int; // 1-default, 2-basic, 3-football, 4-bball		var err:int; //				//Shared Object (saving profiles)		var myLocalData:SharedObject;		//Server vars		var vl:VarLoader;		var uppedProf:Profile;		var uppedBool:Boolean;		var uPisReady:Boolean;		var uPisReady2:Boolean;		var playProf1:Profile;		var playProf2:Profile;				//Arduino Stuff		var inPin:Number;		var selPin1:Number;		var selPin2:Number;		var selPin3:Number;		var selPin4:Number;		var selPin5:Number;		var arduino:Arduino;		var ardyi:int;		var ardyj:int;		var ardyk:int;		var ardyl:int;		var ardym:int;		var lLine:Boolean;		var lBack:Boolean;		var rLine:Boolean;		var rBack:Boolean;		var spotOn:int;				//Useful info:		//Keycodes- ESC-27, ENTER-13, SPACE-32, RIGHT-39, LEFT-37, DOWN-40, UP-38				//Constructor		public function KPOS(){			stage.addEventListener(KeyboardEvent.KEY_UP, inPut);			pageNum = 0;			homeSt = 0;			listSt = 0;			hsSt = 0;			profSt = 0;			statsSt = 0;			rankSt = 0;			bg = 1;			firstGame = true;			serve = false; //Set true if linked to server			ardy = false; //Set true if linked to arduino			numBG = 5;						//If connected to the net to use kingpongdb.com as 			//a database...			if(serve){				uPisReady = false;				uPisReady2 = false;				profArray = new Array();				clearList();			}			else{				myLocalData = SharedObject.getLocal("KingPongBeta1.1");				loadProfs();				//traceProfs();			}			if(ardy){				setArdy();			}		}				function timedFunction(eventArgs:TimerEvent){			talkToArdy();		}						public function clearList() {			var varObj:Object = {};			vl = new VarLoader("http://kingpongdb.com:8000/flashClearList.php", varObj);			vl.addEventListener(Event.COMPLETE, clearListListener);			loader.gotoAndStop(2);		}		//Clears List On Server		function clearListListener(evt:Event) {			vl.removeEventListener(Event.COMPLETE, clearListListener);			loader.gotoAndStop(1);		}						public function setRankList(n:int) {			var varObj:Object = {};			varObj.rorc = n;			vl = new VarLoader("http://kingpongdb.com:8000/flashRank.php", varObj);			vl.addEventListener(Event.COMPLETE, setRankListener);			loader.gotoAndStop(2);		}		//Listens for name and number		function setRankListener(evt:Event) {			vl.removeEventListener(Event.COMPLETE, setRankListener);			pages.hsBoard.numba1.text = unescape(evt.target.vars.nameone);			pages.hsBoard.numba2.text = unescape(evt.target.vars.nametwo);			pages.hsBoard.numba3.text = unescape(evt.target.vars.namethree);			pages.hsBoard.numba4.text = unescape(evt.target.vars.namefour);			pages.hsBoard.numba5.text = unescape(evt.target.vars.namefive);			pages.hsBoard.numba6.text = unescape(evt.target.vars.namesix);			pages.hsBoard.numba7.text = unescape(evt.target.vars.nameseven);			pages.hsBoard.numba8.text = unescape(evt.target.vars.nameeight);			pages.hsBoard.numba9.text = unescape(evt.target.vars.namenine);			pages.hsBoard.numba10.text = unescape(evt.target.vars.nameten);						pages.hsBoard.cred1.text = unescape(evt.target.vars.credone);			pages.hsBoard.cred2.text = unescape(evt.target.vars.credtwo);			pages.hsBoard.cred3.text = unescape(evt.target.vars.credthree);			pages.hsBoard.cred4.text = unescape(evt.target.vars.credfour);			pages.hsBoard.cred5.text = unescape(evt.target.vars.credfive);			pages.hsBoard.cred6.text = unescape(evt.target.vars.credsix);			pages.hsBoard.cred7.text = unescape(evt.target.vars.credseven);			pages.hsBoard.cred8.text = unescape(evt.target.vars.credeight);			pages.hsBoard.cred9.text = unescape(evt.target.vars.crednine);			pages.hsBoard.cred10.text = unescape(evt.target.vars.credten);			loader.gotoAndStop(1);		}																						//Call this function to populate a "Profile" object with data from the server, based on the name.		public function popProfO(n:String):Profile {			if(profIndex(n) != -1){				uppedProf = profArray[profIndex(n)];				pages.profile.found.gotoAndPlay("no");				pages.profile.nameTB.text = "";				stage.focus = pages.profile.nameTB;			}			else{				populateProfileO(n);				//while (!uPisReady){					//Waits for data to be loaded				//}				uPisReady = false;			}			return uppedProf;		}		//Called from above function		function populateProfileO(n:String) {			var varObj:Object = {};			varObj.nameo = n;			vl = new VarLoader("http://kingpongdb.com:8000/flashPopProf.php", varObj);			loader.gotoAndStop(2);			vl.addEventListener(Event.COMPLETE, popProfListenerO);		}		//Listens for profile finishing loading from server		function popProfListenerO(evt:Event) {			vl.removeEventListener(Event.COMPLETE, popProfListenerO);			if(unescape(evt.target.vars.guest) == "1"){				uppedProf = new Profile(unescape(evt.target.vars.nameo), "", 0, 0, 200, 0, 0, 0, true);			}			else{				uppedProf = new Profile(unescape(evt.target.vars.nameo), unescape(evt.target.vars.pass), int(unescape(evt.target.vars.wins)), int(unescape(evt.target.vars.losses)), int(unescape(evt.target.vars.credits)), int(unescape(evt.target.vars.cupshit)), int(unescape(evt.target.vars.cupsdown)), int(unescape(evt.target.vars.rank)), false);				profArray[profArray.length] = uppedProf;			}			loader.gotoAndStop(1);			if(uppedProf.isGuest()){				profSt = 1;				stage.focus = pages.profile.pWordTB;				uppedProf.setPerson("Guest");			}			else {				pages.profile.found.gotoAndPlay("no");				pages.profile.nameTB.text = "";				stage.focus = pages.profile.nameTB;			}			uPisReady = true;		}										//Call this function to populate a "Profile" object with data from the server, based on the name.		public function popProfT(n:String):Profile {			if(profIndex(n) != -1){				uppedProf = profArray[profIndex(n)];				tempProf = uppedProf;				listSt = 1;				pages.theList.play();				stage.focus = pages.theList.passBox.pWord;			}			else{				populateProfileT(n);				//while (!uPisReady){					//Waits for data to be loaded				//}				uPisReady = false;			}			return uppedProf;		}		//Called from above function		function populateProfileT(n:String) {			var varObj:Object = {};			varObj.nameo = n;			vl = new VarLoader("http://kingpongdb.com:8000/flashPopProf.php", varObj);			loader.gotoAndStop(2);			vl.addEventListener(Event.COMPLETE, popProfListenerT);		}		//Listens for profile finishing loading from server		function popProfListenerT(evt:Event) {			vl.removeEventListener(Event.COMPLETE, popProfListenerT);			if(unescape(evt.target.vars.guest) == "1"){				uppedProf = new Profile(unescape(evt.target.vars.nameo), "", 0, 0, 200, 0, 0, 0, true);			}			else{				uppedProf = new Profile(unescape(evt.target.vars.nameo), unescape(evt.target.vars.pass), int(unescape(evt.target.vars.wins)), int(unescape(evt.target.vars.losses)), int(unescape(evt.target.vars.credits)), int(unescape(evt.target.vars.cupshit)), int(unescape(evt.target.vars.cupsdown)), int(unescape(evt.target.vars.rank)), false);				profArray[profArray.length] = uppedProf;			}			loader.gotoAndStop(1);						if(uppedProf.isGuest()){				pages.theList.enqueue(uppedProf);				tempProf = uppedProf;				stage.focus = pages.theList.nextOpen();				enqProf(uppedProf.getPerson());			}			else{				listSt = 1;				pages.theList.play();				tempProf = uppedProf;				stage.focus = pages.theList.passBox.pWord;			}						uPisReady = true;		}																														//Call this function to populate a "Profile" object with data from the server, based on the name.		public function popProfF(n:String):Profile {			if(profIndex(n) != -1){				uppedProf = profArray[profIndex(n)];				tempProf = uppedProf;				pages.stats.getStats(tempProf);				statsSt = 1;				stage.focus = stage;			}			else{				populateProfileF(n);				//while (!uPisReady){					//Waits for data to be loaded				//}				uPisReady = false;			}			return uppedProf;		}		//Called from above function		function populateProfileF(n:String) {			var varObj:Object = {};			varObj.nameo = n;			vl = new VarLoader("http://kingpongdb.com:8000/flashPopProf.php", varObj);			loader.gotoAndStop(2);			vl.addEventListener(Event.COMPLETE, popProfListenerF);		}		//Listens for profile finishing loading from server		function popProfListenerF(evt:Event) {			vl.removeEventListener(Event.COMPLETE, popProfListenerF);			if(unescape(evt.target.vars.guest) == "1"){				uppedProf = new Profile(unescape(evt.target.vars.nameo), "", 0, 0, 200, 0, 0, 0, true);			}			else{				uppedProf = new Profile(unescape(evt.target.vars.nameo), unescape(evt.target.vars.pass), int(unescape(evt.target.vars.wins)), int(unescape(evt.target.vars.losses)), int(unescape(evt.target.vars.credits)), int(unescape(evt.target.vars.cupshit)), int(unescape(evt.target.vars.cupsdown)), int(unescape(evt.target.vars.rank)), false);				profArray[profArray.length] = uppedProf;			}						tempProf = uppedProf;			if(tempProf.isGuest()){				pages.stats.who.text = "";				tempProf.setPerson("Guest");			}			else {				pages.stats.getStats(tempProf);				statsSt = 1;				stage.focus = stage;			}			loader.gotoAndStop(1);			uPisReady = true;		}														//Call this function to populate a "Profile" object with data from the server, based on the name.		public function popProf(n:String):Profile {			if(profIndex(n) != -1){				uppedProf = profArray[profIndex(n)];			}			else{				populateProfile(n);				//while (!uPisReady){					//Waits for data to be loaded				//}				uPisReady = false;			}			return uppedProf;		}		//Called from above function		function populateProfile(n:String) {			var varObj:Object = {};			varObj.nameo = n;			vl = new VarLoader("http://kingpongdb.com:8000/flashPopProf.php", varObj);			loader.gotoAndStop(2);			vl.addEventListener(Event.COMPLETE, popProfListener);		}		//Listens for profile finishing loading from server		function popProfListener(evt:Event) {			vl.removeEventListener(Event.COMPLETE, popProfListener);			if(unescape(evt.target.vars.guest) == "1"){				uppedProf = new Profile(unescape(evt.target.vars.nameo), "", 0, 0, 200, 0, 0, 0, true);			}			else{				uppedProf = new Profile(unescape(evt.target.vars.nameo), unescape(evt.target.vars.pass), int(unescape(evt.target.vars.wins)), int(unescape(evt.target.vars.losses)), int(unescape(evt.target.vars.credits)), int(unescape(evt.target.vars.cupshit)), int(unescape(evt.target.vars.cupsdown)), int(unescape(evt.target.vars.rank)), false);				profArray[profArray.length] = uppedProf;			}			loader.gotoAndStop(1);			uPisReady = true;		}						//Updates/Uploads a profile to the server		public function upProf(prof:Profile){			var varObj:Object = {};			varObj.nameo = prof.getPerson();			varObj.pass = prof.getPass();			varObj.wins = prof.getWins();			varObj.losses = prof.getLosses();			varObj.ch = prof.getCH();			varObj.cd = prof.getCD();			varObj.credits = prof.getCredits();						vl = new VarLoader("http://kingpongdb.com:8000/flashUpProf.php", varObj);		}								//Call this function to see if there are enough names in list to start a game. Sets uppedBool = true if so.		public function listReady(n:int):Boolean {			uppedBool = false;			checkListReady(n);			//while (!uPisReady){				//Waits for data to be loaded			//}			uPisReady = false;			return uppedBool;		}		//Called from above function		function checkListReady(n:int) {			var varObj:Object = {};			varObj.num = n;			vl = new VarLoader("http://kingpongdb.com:8000/flashCheckedList.php", varObj);			loader.gotoAndStop(2);			vl.addEventListener(Event.COMPLETE, checkListListener);		}		//Listens for list status finishing loading from server		function checkListListener(evt:Event) {			vl.removeEventListener(Event.COMPLETE, checkListListener);			if(unescape(evt.target.vars.yes) == "1"){				uppedBool = true;			}			else{				uppedBool = false;			}			loader.gotoAndStop(1);			uPisReady = true;		}										//Call this function to get next to profiles to play. sets playProf1 and playProf2 to respective Profiles;		public function getNames(n:int) {			getListNames(n);			/*			while (!uPisReady2){				//Waits for data to be loaded			}			*/			uPisReady2 = false;		}		//Called from above function		function getListNames(n:int) {			var varObj:Object = {};			varObj.num = n;			vl = new VarLoader("http://kingpongdb.com:8000/flashDequeue.php", varObj);			loader.gotoAndStop(2);			vl.addEventListener(Event.COMPLETE, getNamesListener);		}		//Listens for list status finishing loading from server		function getNamesListener(evt:Event) {			vl.removeEventListener(Event.COMPLETE, getNamesListener);			playProf1 = popProf(unescape(evt.target.vars.name1));			playProf2 = popProf(unescape(evt.target.vars.name2));			loader.gotoAndStop(1);			uPisReady2 = true;		}				//Enqueues into the list via the name of a profile		public function enqProf(nameo:String) {			enqName(nameo);			//while (!uPisReady){				//Waits for data to be loaded			//}			uPisReady2 = false;			return uppedBool;		}		//Called from above function		function enqName(nameo:String) {			var varObj:Object = {};			varObj.nameo = nameo;			vl = new VarLoader("http://kingpongdb.com:8000/flashEnqueue.php", varObj);			loader.gotoAndStop(2);			vl.addEventListener(Event.COMPLETE, enqListener);		}		//Listens for list status finishing loading from server		function enqListener(evt:Event) {			vl.removeEventListener(Event.COMPLETE, enqListener);			loader.gotoAndStop(1);			uPisReady = true;			if((unescape(evt.target.vars.ok)) == "yes"){				uppedBool = true;			}			else {				uppedBool = false;			}		}																										//In charge of all inputs regarding page changes, 		//submits, etc... Pretty much everything lol		public function inPut(evt:KeyboardEvent){			//HOME			if(pageNum == 0){				//B-change Background				if (evt.keyCode == 66) {					if(bg < numBG){						bg++;					}					else {						bg = 1;					}					BG.gotoAndStop(bg);				}				//ArrowsAllowed				else if(homeSt == 0){					//ENTER					if(evt.keyCode == 13){						if(pages.theCups.getIFilled() + pages.theCups.getOFilled() == 20){							//PressPlay							if(gcSt == 0){								//Dequeue 4 or 2								if(firstGame){									if(pages.theList.isReady(4)){										trace("yo");										pages.winSelect.gotoAndStop(1);										//Dequeue em										pZZ = pages.theList.dequeue();										pZO = pages.theList.dequeue();										pOZ = pages.theList.dequeue();										pOO = pages.theList.dequeue();										//Check if first game of night (details in Profile.as)										pZZ.firstOfNight();										pZO.firstOfNight();										pOZ.firstOfNight();										pOO.firstOfNight();																				if(serve){											getNames(1);											getNames(2);										}																														firstGame = false; //deals with first game of table, not of individual									}									else{										return;									}								}								else {									if(pages.theList.isReady(2)){										trace("y2o");										pages.winSelect.gotoAndStop(1);										if(pZZ == null){											//dequeue											pZZ = pages.theList.dequeue();											pZO = pages.theList.dequeue();																						//Check if first game of night (details in Profile.as)											pZZ.firstOfNight();											pZO.firstOfNight();																						if(serve){												getNames(1);											}										}										else{											//dequeue											pOZ = pages.theList.dequeue();											pOO = pages.theList.dequeue();																						//Check if first game of night (details in Profile.as)											pOZ.firstOfNight();											pOO.firstOfNight();																						if(serve){												getNames(2);											}										}									}									else{										return;									}								}								homeSt = 1;								gcSt = 1;								//Populate "vs" textBox								pages.gC.vBar.t1.text = (pZZ.getPerson()+" and "+pZO.getPerson());								pages.gC.vBar.t2.text = (pOZ.getPerson()+" and "+pOO.getPerson());								pages.gC.play();								stage.focus = pages.gC.creds.credBet;							}						}						else {							return;						}					}					//Right Arrow-List					else if(evt.keyCode == 39){						pageNum = 1;						pages.goTo(pageNum);						listSt = 0;						stage.focus = pages.theList.nextOpen();					}					//Left Arrow-Profile					else if(evt.keyCode == 37){						pageNum = 2;						pages.goTo(pageNum);						profSt = 0;						stage.focus = pages.profile.nameTB;					}					//Down Arrow-HighScore					else if(evt.keyCode == 40){						pageNum = 3;						pages.goTo(pageNum);						hsSt = 0;					}					//Up Arrow-Stats					else if(evt.keyCode == 38){						pageNum = 4;						pages.goTo(pageNum);						statsSt = 0;						stage.focus = pages.stats.who;					}				}				//Enter Creds				else if(homeSt == 1){					//ENTER					if(evt.keyCode == 13){						tempInt = pages.gC.creds.credBet.text;						if(tempInt != 0){							//If everyone can afford credit amount							if(((tempInt <= pZZ.getCredits())&&(tempInt <= pZO.getCredits()))&&((tempInt <= pOZ.getCredits())&&(tempInt <= pOO.getCredits()))){								//Place bets								pZZ.bet(tempInt);								pZO.bet(tempInt);								pOZ.bet(tempInt);								pOO.bet(tempInt);																gcSt = 3;								homeSt = 0;								pages.gC.play();							}							else {								pages.gC.creds.credBet.text = "";								stage.focus = pages.gC.creds.credBet;							}						}					}				}			}			//LIST			else if(pageNum == 1){				//ESCAPE-Home				if (evt.keyCode == 27) {					pageNum = 0;					pages.goTo(pageNum);					homeSt = 0;					pages.theList.nextOpen().text = "";					stage.focus = stage;				}				//Just got to page-in nextTB				if(listSt == 0){					//ENTER					if(evt.keyCode == 13) {						tempStr = pages.theList.nextOpen().text;						//If Unempty						if(tempStr != ""){							//And list isn't full...							if(!pages.theList.listFull()){								if(serve){																		//POPULATE PROFILE																		tempProf = popProfT(tempStr);																		//POPULATE PROFILE HERE  ^ ^ ^																	}								else{									tempInt = profIndex(tempStr);																	//And name isn't in list									if(tempInt == -1){										tempProf = new Profile(tempStr, "", 0, 0, 200, 0, 0, 0, true);										pages.theList.enqueue(tempProf);										stage.focus = pages.theList.nextOpen();									}									//Name IS in list									else {										tempProf = profArray[tempInt];										listSt = 1;										pages.theList.play();										stage.focus = pages.theList.passBox.pWord;									}								}							}							//List is full							else{								stage.focus = pages.theList.nextOpen();							}						}						//Empty String						else{							stage.focus = pages.theList.nextOpen();						}					}				}				//Enter Password				else if(listSt == 1){					//ENTER					if(evt.keyCode == 13) {						tempStr = pages.theList.passBox.pWord.text;						//If Unempty						if(tempStr != ""){							//If Password Valid							if(tempStr == tempProf.getPass()){								pages.theList.enqueue(profArray[tempInt]);								if(serve){									enqProf(tempProf.getPerson());								}							}							pages.theList.play();							listSt = 0;							stage.focus = pages.theList.nextOpen();							pages.theList.passBox.pWord.text = "";						}					}				}							}			//PROFILE			else if(pageNum == 2){				//ESCAPE-Home				if (evt.keyCode == 27) {					pageNum = 0;					pages.goTo(pageNum);					homeSt = 0;					stage.focus = stage;				}				//Just got to page-in nameTB				if (profSt == 0){					//ENTER					if(evt.keyCode == 13) {						tempStr = pages.profile.nameTB.text;						//If textbox is not blank						if(tempStr != ""){							//If name isn't taken							if(serve){																//POPULATE PROFILE																tempProf = popProfO(tempStr);																//POPULATE PROFILE															}							else {								if(profIndex(tempStr) == -1){									profSt = 1;									stage.focus = pages.profile.pWordTB;								}								//name is taken								else{									pages.profile.found.gotoAndPlay("no");									pages.profile.nameTB.text = "";									stage.focus = pages.profile.nameTB;								}							}						}						else{							stage.focus = pages.profile.nameTB;						}					}				}				//Entered in name successfully				else if (profSt == 1){					//ENTER					if(evt.keyCode == 13) {						tempStr = pages.profile.pWordTB.text;						//If textbox is not blank						if(tempStr != ""){							profSt = 2;							stage.focus = pages.profile.rpWordTB;						}						else {							stage.focus = pages.profile.pWordTB;						}					}				}				//Entered first password successfully				else if (profSt == 2){					//ENTER					if(evt.keyCode == 13){						tempStr = pages.profile.rpWordTB.text;						//If textbox is not blank						if(tempStr != ""){							//If passwords are equal- HOORAY!							if(tempStr == pages.profile.pWordTB.text){								if(serve) {									profSt = 3;									tempProf = new Profile(pages.profile.nameTB.text, pages.profile.pWordTB.text, 0, 0, 500, 0, 0, 0, false);									profArray[profArray.length] = tempProf;									pages.profile.nameTB.text = "";									pages.profile.pWordTB.text = "";									pages.profile.rpWordTB.text = "";									pages.profile.found.gotoAndPlay("yes");																		//ADD PROFILE																		upProf(tempProf);																		//ADD PROFILE																											stage.focus = stage;								}								else{									profSt = 3;									tempProf = new Profile(pages.profile.nameTB.text, pages.profile.pWordTB.text, 0, 0, 500, 0, 0, 0, false);									profArray[profArray.length] = tempProf;									pages.profile.nameTB.text = "";									pages.profile.pWordTB.text = "";									pages.profile.rpWordTB.text = "";									pages.profile.found.gotoAndPlay("yes");									saveProfs();									stage.focus = stage;								}							}							//Passwords unequal							else {								profSt = 1;								pages.profile.pWordTB.text = "";								pages.profile.rpWordTB.text = "";								pages.profile.found.gotoAndPlay("bpw");								stage.focus = pages.profile.pWordTB;							}						}						else {							stage.focus = pages.profile.rpWordTB;						}					}				}				//Entered Everything Successfully!				else if(profSt == 3){					//ENTER					if(evt.keyCode == 13){						pageNum = 0;						pages.goTo(pageNum);						homeSt = 0;					}				}			}			//HIGHSCORE			else if(pageNum == 3){				//ESCAPE-Home				if (evt.keyCode == 27) {					pageNum = 0;					pages.goTo(pageNum);					homeSt = 0;					stage.focus = stage;				}				else if (evt.keyCode == 13){					if(serve){						setRankList(rankSt);						if(rankSt == 1){							rankSt = 0;						}						else {							rankSt = 1;						}					}				}			}			//STATS			else if(pageNum == 4){				//ESCAPE-Home				if (evt.keyCode == 27) {					pageNum = 0;					pages.goTo(pageNum);					pages.stats.clearStats();					statsSt = 0;					stage.focus = stage;				}				//ENTER				else if(evt.keyCode == 13){					if(statsSt == 0){						if(serve){														//POPULATE PROFILE															tempProf = popProfF(pages.stats.who.text);															//POPULATE PROFILE																				}						else{							tempInt = profIndex(pages.stats.who.text);							if(tempInt != -1){								pages.stats.getStats(profArray[tempInt]);								statsSt = 1;								stage.focus = stage;							}							else {								pages.stats.who.text = "";							}						}					}					else {						pages.stats.clearStats();						stage.focus = pages.stats.who;						statsSt = 0;					}				}			}		}				//Returns position of named profile in profArray: -1 if not found		function profIndex(n:String):int {			for(tempInt = 0; tempInt < profArray.length; tempInt++){				if(profArray[tempInt].getPerson() == n){					return tempInt; //Index of profile in array				}			}			//Profile not found in array			return -1;		}				//LOAD PROFILES		function loadProfs(){			profArray = new Array();			//If save exists			if(myLocalData.data.Persons != undefined){				for(tempInt = 0; tempInt < myLocalData.data.Persons.length; tempInt++){					profArray[tempInt] = new Profile(myLocalData.data.Persons[tempInt], myLocalData.data.pWords[tempInt], myLocalData.data.Wins[tempInt], myLocalData.data.Losses[tempInt], myLocalData.data.Credits[tempInt], myLocalData.data.Rank[tempInt], myLocalData.data.CupsHit[tempInt], myLocalData.data.CupsDown[tempInt], false);				}			}		}				//Saves Profiles		function saveProfs(){			//Creates/Refreshes all data arrays to be saved			myLocalData.data.Persons = new Array();			myLocalData.data.pWords = new Array();			myLocalData.data.Credits = new Array();			myLocalData.data.Wins = new Array();			myLocalData.data.Losses = new Array();			myLocalData.data.CupsHit = new Array();			myLocalData.data.CupsDown = new Array();			myLocalData.data.Rank = new Array();						//saves EVERYTHING			for(tempInt = 0; tempInt < profArray.length; tempInt++){				myLocalData.data.Persons[tempInt] = profArray[tempInt].getPerson();				myLocalData.data.pWords[tempInt] = profArray[tempInt].getPass();				myLocalData.data.Credits[tempInt] = profArray[tempInt].getCredits();				myLocalData.data.Wins[tempInt] = profArray[tempInt].getWins();				myLocalData.data.Losses[tempInt] = profArray[tempInt].getLosses();				myLocalData.data.CupsHit[tempInt] = profArray[tempInt].getCH();				myLocalData.data.CupsDown[tempInt] = profArray[tempInt].getCD();				myLocalData.data.Rank[tempInt] = profArray[tempInt].getRank();			}			myLocalData.flush();		}				//Trace Profiles- used to back up profiles/ debug		function traceProfs(){			for(tempInt = 0; tempInt < profArray.length; tempInt++){				trace("Name: "+profArray[tempInt].getPerson());				trace("Pass: "+profArray[tempInt].getPass());				trace("Credits: "+profArray[tempInt].getCredits());				trace("Wins: "+profArray[tempInt].getWins());				trace("Losses: "+profArray[tempInt].getLosses());				trace("");			}		}												function setArdy(){			//Arduinooooooooooo			inPin = 13;			selPin1 = 12;			selPin2 = 11;			selPin3 = 10;			selPin4 = 9;			selPin5 = 8;			arduino = new Arduino("127.0.0.1", 5331);			arduino.addEventListener(Event.CONNECT, onSockCon); //Adds event that listens for connection to socket with serproxy		}				function onSockCon(e:Object):void {			arduino.removeEventListener(Event.CONNECT, onSockCon);  			trace("Socket Connected");  			arduino.addEventListener(ArduinoEvent.FIRMWARE_VERSION, onReceiveFW); //Adds event that listens for firmware to be returned  			arduino.requestFirmwareVersion(); //Requests Firmware		}				function onReceiveFW(e:ArduinoEvent):void {			arduino.removeEventListener(ArduinoEvent.FIRMWARE_VERSION, onReceiveFW); 			trace("Firmware Received");			//arduino.addEventListener(ArduinoEvent.DIGITAL_DATA, onReceiveD); //Adds event that listens for digital data to be returned			arduino.setPinMode(selPin1, Arduino.OUTPUT);			arduino.setPinMode(selPin2, Arduino.OUTPUT);			arduino.setPinMode(selPin3, Arduino.OUTPUT);			arduino.setPinMode(selPin4, Arduino.OUTPUT);			arduino.setPinMode(selPin5, Arduino.OUTPUT);			arduino.setPinMode(inPin, Arduino.INPUT);			arduino.enableDigitalPinReporting(); //Knows to listen for digital input			myTimer = new Timer(100);			myTimer.addEventListener("timer", timedFunction);			myTimer.start();		}				function onReceiveD(e:ArduinoEvent):void { 			trace("Data Received!");		}				function talkToArdy() {						if(spotOn == 25){				spotOn = 0;				ardyi = 0;				ardyj = 0;				ardyk = 0;				ardyl = 0;				ardym = 0;			}						arduino.writeDigitalPin(selPin5, ardyi);			arduino.writeDigitalPin(selPin4, ardyj);			arduino.writeDigitalPin(selPin3, ardyk);			arduino.writeDigitalPin(selPin2, ardyl);			arduino.writeDigitalPin(selPin1, ardym);			//trace(ardyi+""+ardyj+""+ardyk+""+ardyl+""+ardym+" "+spotOn);						if(spotOn >= 21){				if(spotOn >= 22){					if(spotOn >= 23){						if(spotOn == 24){							if(arduino.getDigitalData(inPin) == Arduino.HIGH){								if(!lBack){									pages.theCups.team1.rotation += 60;									pages.theCups.team1.x += 45;									pages.theCups.team1.y += 25;								}								lBack = true;							}							else{								if(lBack){									pages.theCups.team1.rotation -= 60;									pages.theCups.team1.x -= 45;									pages.theCups.team1.y -= 25;								}								lBack = false;							}						}						else {							if(arduino.getDigitalData(inPin) == Arduino.HIGH){								if(!lLine){									pages.theCups.team1.rotation -= 30;									pages.theCups.team1.x += 40;									pages.theCups.team1.y -= 50;								}								lLine = true;							}							else{								if(lLine){									pages.theCups.team1.rotation += 30;									pages.theCups.team1.x -= 40;									pages.theCups.team1.y += 50;								}								lLine = false;							}						}					}					else {						if(arduino.getDigitalData(inPin) == Arduino.HIGH){							if(!rBack){								pages.theCups.team0.rotation += 60;								pages.theCups.team0.x -= 45;								pages.theCups.team0.y -= 25;							}							rBack = true;						}						else{							if(rBack){								pages.theCups.team0.rotation -= 60;								pages.theCups.team0.x += 45;								pages.theCups.team0.y += 25;							}							rBack = false;						}					}				}				else {					if(arduino.getDigitalData(inPin) == Arduino.HIGH){						if(!rLine){							pages.theCups.team0.rotation -= 30;							pages.theCups.team0.x -= 40;							pages.theCups.team0.y += 50;						}						rLine = true;					}					else{						if(rLine){							pages.theCups.team0.rotation += 30;							pages.theCups.team0.x += 40;							pages.theCups.team0.y -= 50;						}						rLine = false;					}				}			}			else{				if(arduino.getDigitalData(inPin) == Arduino.HIGH){					pages.theCups.fill(spotOn-1);				}				else {					pages.theCups.drain(spotOn-1);				}			}			spotOn++;									if(ardym == 0){				ardym = 1;			}			else {				ardym = 0;				if(ardyl == 0){					ardyl = 1;				}				else {					ardyl = 0;					if(ardyk == 0){						ardyk = 1;					}					else {						ardyk = 0;						if(ardyj == 0){							ardyj = 1;						}						else {							ardyj = 0;							if(ardyi == 0){								ardyi = 1;							}							else {								ardyi = 0;							}						}					}				}			}						//*/						/*			arduino.writeDigitalPin(selPin5, 1);			arduino.writeDigitalPin(selPin4, 0);			arduino.writeDigitalPin(selPin3, 0);			arduino.writeDigitalPin(selPin2, 0);			arduino.writeDigitalPin(selPin1, 0);						if(arduino.getDigitalData(inPin) == Arduino.HIGH){				pages.theCups.fill(0);			}			else {				pages.theCups.drain(0);			}			*/						/*			spotOn = 0;			for(ardyi = 0; ardyi < 2; ardyi++){				arduino.writeDigitalPin(selPin5, ardyi);				for(ardyj = 0; ardyj < 2; ardyj++){					arduino.writeDigitalPin(selPin4, ardyj);					for(ardyk = 0; ardyk < 2; ardyk++){						arduino.writeDigitalPin(selPin3, ardyk);						for(ardyl = 0; ardyl < 2; ardyl++){							arduino.writeDigitalPin(selPin2, ardyl);							for(ardym = 0; ardym < 2; ardym++){								arduino.writeDigitalPin(selPin1, ardym);								if(arduino.getDigitalData(inPin) == Arduino.HIGH){									pages.theCups.fill(spotOn);									trace("fill: "+spotOn);								}								else {									pages.theCups.drain(spotOn);									trace("drain: "+spotOn);								}								spotOn++;							}						}					}				}			}			*/			if(pages.theCups.getIFilled() == 0 && gcSt == 3){				win(1);			}			if(pages.theCups.getOFilled() == 0 && gcSt == 3){				win(0);			}		}																																//0 if left wins, 1 if right wins		public function win(lor:int){			if(gcSt == 3){				if (lor == 0){					pages.winSelect.gotoAndStop(2);					pZZ.win(pages.gC.creds.credBet.text , 10, 10-pages.theCups.getIFilled());					pZO.win(pages.gC.creds.credBet.text , 10, 10-pages.theCups.getIFilled());					pOZ.lose(10-pages.theCups.getIFilled(), 10);					pOO.lose(10-pages.theCups.getIFilled(), 10);					if(serve) {						upProf(pZZ);						upProf(pZO);						upProf(pOZ);						upProf(pOO);					}					else {						saveProfs();					}					pOZ = null;					pOO = null;				}				else {					pages.winSelect.gotoAndStop(3);					pOZ.win(pages.gC.creds.credBet.text , 10, 10-pages.theCups.getOFilled());					pOO.win(pages.gC.creds.credBet.text , 10, 10-pages.theCups.getOFilled());					pZZ.lose(10-pages.theCups.getOFilled(), 10);					pZO.lose(10-pages.theCups.getOFilled(), 10);					if(serve) {						upProf(pZZ);						upProf(pZO);						upProf(pOZ);						upProf(pOO);					}					else { 						saveProfs();					}					pZZ = null;					pZO = null;				}					homeSt = 0;				gcSt = 0;				pages.gC.play();			}		}	}}