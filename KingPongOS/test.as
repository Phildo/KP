package {	import flash.display.MovieClip;	import flash.events.*;	import net.kaegi.loaders.VarLoader;	import app.Profile;	//import app.Cups;	import net.eriksjodin.arduino.Arduino;	import net.eriksjodin.arduino.events.ArduinoEvent;	import flash.utils.*;		public class test extends MovieClip{				//Server vars		var vl:VarLoader;		var uppedProf:Profile;		var uppedBool:Boolean;		var uPisReady:Boolean;		var uPisReady2:Boolean;		var playProf1:Profile;		var playProf2:Profile;		var profArray:Array;						//Arduino Stuff		var inPin:Number;		var selPin1:Number;		var selPin2:Number;		var selPin3:Number;		var selPin4:Number;		var selPin5:Number;		var arduino:Arduino;		var ardyi:int;		var ardyj:int;		var ardyk:int;		var ardyl:int;		var ardym:int;		var spotOn:int;		var myTimer:Timer;		var theTimer:Timer;		var fuck:int;		var bool:Boolean;						public function test() {			//var phil:Profile = popProf("Phildo");			//getNames(1);			//hey(1);			fuck = 0;			bool = true;			setArdy();			//theTimer = new Timer(10000);			//theTimer.addEventListener("timer", theTimerFunc);			//theTimer.start();		}				function setArdy(){			//Arduinooooooooooo			inPin = 13;			selPin1 = 12;			selPin2 = 11;			selPin3 = 10;			selPin4 = 9;			selPin5 = 8;			arduino = new Arduino("127.0.0.1", 5331);			arduino.addEventListener(ArduinoEvent.FIRMWARE_VERSION, onReceiveFirmwareVersion);		}				function onReceiveFirmwareVersion(e:ArduinoEvent):void {			arduino.setPinMode(selPin1, Arduino.OUTPUT);			arduino.setPinMode(selPin2, Arduino.OUTPUT);			arduino.setPinMode(selPin3, Arduino.OUTPUT);			arduino.setPinMode(selPin4, Arduino.OUTPUT);			arduino.setPinMode(selPin5, Arduino.OUTPUT);			arduino.setPinMode(6, Arduino.INPUT);			arduino.enableDigitalPinReporting();			trace("TEST");			//arduino.addEventListener(ArduinoEvent.DIGITAL_DATA, onReceiveDigitalData);			myTimer = new Timer(10000);			myTimer.addEventListener("timer", timedFunction);			myTimer.start();			trace("TESTAGAIN");		}				function timedFunction(eventArgs:TimerEvent){			testArdy();			fuck++;			//talkToArdy();			trace(fuck);			trace();		}				function testArdy(){			trace(arduino.getDigitalData(6));			if(bool){				arduino.writeDigitalPin(7, Arduino.HIGH);			}			else {				arduino.writeDigitalPin(7, Arduino.LOW);			}			bool = !bool;			trace (bool);			trace(arduino.getDigitalData(6));			//arduino.addEventListener(ArduinoEvent.DIGITAL_DATA, onReceiveDigitalData);		}				function onReceiveDigitalData(e:ArduinoEvent):void {			if(e.pin==6) {				if (e.value==Arduino.LOW) {					trace("NO");				} 				else {					trace("YES");				}			}		}		function talkToArdy() {			spotOn = 0;			for(ardyi = 0; ardyi < 2; ardyi++){				arduino.writeDigitalPin(selPin5, ardyi);				for(ardyj = 0; ardyj < 2; ardyj++){					arduino.writeDigitalPin(selPin4, ardyj);					for(ardyk = 0; ardyk < 2; ardyk++){						arduino.writeDigitalPin(selPin3, ardyk);						for(ardyl = 0; ardyl < 2; ardyl++){							arduino.writeDigitalPin(selPin2, ardyl);							for(ardym = 0; ardym < 2; ardym++){								arduino.writeDigitalPin(selPin1, ardym);								if(arduino.getDigitalData(inPin) == Arduino.HIGH){									trace("Fill "+spotOn);								}								else {									trace("Drain "+spotOn);								}								spotOn++;							}						}					}				}			}		}						function theTimerFunc(eventArgs:TimerEvent){			theTimer.removeEventListener("timer", theTimerFunc);			myTimer = new Timer(5000);			myTimer.addEventListener("timer", timedFunction);			myTimer.start();		}																																				public function hey(n:int) {			trace("HEY");			n++;			if (n < 1000) {				hey(n);			}		}				//Call this function to populate a "Profile" object with data from the server, based on the name.		public function popProf(n:String):Profile {			turxt.text = "hey";			populateProfile(n);			//while (!uPisReady){				//Waits for data to be loaded			//}			uPisReady = false;			return uppedProf;		}		//Called from above function		function populateProfile(n:String) {			var varObj:Object = {};			varObj.nameo = n;			vl = new VarLoader("http://kingpongdb.com/flashPopProf.php", varObj);			turxt.text = "tehe";			vl.addEventListener(Event.COMPLETE, popProfListener);		}		//Listens for profile finishing loading from server		function popProfListener(evt:Event) {			turxt.text = "okwtf";			if(unescape(evt.target.vars.guest) == "1"){				uppedProf = new Profile(unescape(evt.target.vars.nameo), "", 0, 0, 200, 0, 0, 0, true);			}			else{				uppedProf = new Profile(unescape(evt.target.vars.nameo), unescape(evt.target.vars.password), int(unescape(evt.target.vars.wins)), int(unescape(evt.target.vars.losses)), int(unescape(evt.target.vars.credits)), int(unescape(evt.target.vars.rank)), int(unescape(evt.target.vars.cupshit)), int(unescape(evt.target.vars.cupsdown)), false);				//profArray[profArray.length] = uppedProf;			}			turxt.text = "last";			turxt.text = ""+uppedProf.getCredits();			trace(uppedProf.getPerson());			trace(uppedProf.getCredits());			trace(uppedProf.getPass());						uPisReady = true;		}						//Updates/Uploads a profile to the server		public function upProf(prof:Profile){			var varObj:Object = {};			varObj.nameo = prof.getPerson();			varObj.pass = prof.getPass();			varObj.wins = prof.getWins();			varObj.losses = prof.getLosses();			varObj.ch = prof.getCH();			varObj.cd = prof.getCD();			varObj.credits = prof.getCredits();						vl = new VarLoader("http://localhost/flashUpProf.php", varObj);		}								//Call this function to see if there are enough names in list to start a game. Sets uppedBool = true if so.		public function listReady(n:int):Boolean {			uppedBool = false;			checkListReady(n);			while (!uPisReady){				//Waits for data to be loaded			}			uPisReady = false;			return uppedBool;		}		//Called from above function		function checkListReady(n:int) {			var varObj:Object = {};			varObj.num = n;			vl = new VarLoader("http://localhost/flashtest/flashCheckedList.php", varObj);						vl.addEventListener(Event.COMPLETE, checkListListener);		}		//Listens for list status finishing loading from server		function checkListListener(evt:Event) {			if(unescape(evt.target.vars.yes) == "1"){				uppedBool = true;			}			else{				uppedBool = false;			}						uPisReady = true;		}						//Call this function to edit the status of a cup server side		//pass something like "five" "0" to drain cup five. "ofive" is fifth cup on right team.		public function setCup(cup:String, stat:int){			var varObj:Object = {};			varObj.cup = cup;			varObj.stat= stat;			vl = new VarLoader("http://localhost/flashtest/flashCups.php", varObj);		}						//Call this function to get next to profiles to play. sets playProf1 and playProf2 to respective Profiles;		public function getNames(n:int) {			getListNames(n);			//while (!uPisReady2){				//Waits for data to be loaded			//}			trace("HEY");			uPisReady2 = false;		}		//Called from above function		function getListNames(n:int) {			var varObj:Object = {};			varObj.num = n;			vl = new VarLoader("http://localhost/flashtest/flashDequeue.php", varObj);						vl.addEventListener(Event.COMPLETE, getNamesListener);		}		//Listens for list status finishing loading from server		function getNamesListener(evt:Event) {			playProf1 = popProf(unescape(evt.target.vars.name1));			playProf2 = popProf(unescape(evt.target.vars.name2));						uPisReady2 = true;		}				//Enqueues into the list via the name of a profile		public function enqProf(nameo:String) {			enqName(nameo);			while (!uPisReady){				//Waits for data to be loaded			}			uPisReady2 = false;			return uppedBool;		}		//Called from above function		function enqName(nameo:String) {			var varObj:Object = {};			varObj.nameo = nameo;			vl = new VarLoader("http://localhost/flashtest/flashEnqueue.php", varObj);						vl.addEventListener(Event.COMPLETE, enqListener);		}		//Listens for list status finishing loading from server		function enqListener(evt:Event) {						uPisReady = true;			if((unescape(evt.target.vars.ok)) == "yes"){				uppedBool = true;			}			else {				uppedBool = false;			}		}	}}