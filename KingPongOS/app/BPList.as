package app{	import app.Profile;	import flash.display.MovieClip;	public class BPList extends MovieClip {		//Parallel Arrays		private static var profArray:Array;		private var boxArray:Array;		private var foundArray:Array;		private static var foundArrayNum:Array;				//Temp Variables		private var tempInt:int;		private var tempProf:Profile;				//Static Variables		private static var numOn:int;		private static var isFull:Boolean;		public function BPList() {			profArray = new Array();			boxArray = new Array();			foundArray = new Array();			foundArrayNum = new Array();			isFull=false;			numOn=0;						//TEXT BOXES			boxArray[0]=this.tb1;			boxArray[1]=this.tb2;			boxArray[2]=this.tb3;			boxArray[3]=this.tb4;			boxArray[4]=this.tb5;			boxArray[5]=this.tb6;			boxArray[6]=this.tb7;			boxArray[7]=this.tb8;			boxArray[8]=this.tb9;			boxArray[9]=this.tb10;			boxArray[10]=this.tb11;			boxArray[11]=this.tb12;			boxArray[12]=this.tb13;			boxArray[13]=this.tb14;			boxArray[14]=this.tb15;			boxArray[15]=this.tb16;			boxArray[16]=this.tb17;			boxArray[17]=this.tb18;			boxArray[18]=this.tb19;			boxArray[19]=this.tb20;			boxArray[20]=this.tb21;						//FOUND BUTTONS			foundArray[0]=this.isreg1;			foundArray[1]=this.isreg2;			foundArray[2]=this.isreg3;			foundArray[3]=this.isreg4;			foundArray[4]=this.isreg5;			foundArray[5]=this.isreg6;			foundArray[6]=this.isreg7;			foundArray[7]=this.isreg8;			foundArray[8]=this.isreg9;			foundArray[9]=this.isreg10;			foundArray[10]=this.isreg11;			foundArray[11]=this.isreg12;			foundArray[12]=this.isreg13;			foundArray[13]=this.isreg14;			foundArray[14]=this.isreg15;			foundArray[15]=this.isreg16;			foundArray[16]=this.isreg17;			foundArray[17]=this.isreg18;			foundArray[18]=this.isreg19;			foundArray[19]=this.isreg20;			foundArray[20]=this.isreg21;						//FOUND FRAME NUMBERS			//1-Maybe, 2-Yes, 3-No			foundArrayNum[0]=1;			foundArrayNum[1]=1;			foundArrayNum[2]=1;			foundArrayNum[3]=1;			foundArrayNum[4]=1;			foundArrayNum[5]=1;			foundArrayNum[6]=1;			foundArrayNum[7]=1;			foundArrayNum[8]=1;			foundArrayNum[9]=1;			foundArrayNum[10]=1;			foundArrayNum[11]=1;			foundArrayNum[12]=1;			foundArrayNum[13]=1;			foundArrayNum[14]=1;			foundArrayNum[15]=1;			foundArrayNum[16]=1;			foundArrayNum[17]=1;			foundArrayNum[18]=1;			foundArrayNum[19]=1;			foundArrayNum[20]=1;		}				//Add to list		public function enqueue(p:Profile) {			//Adds to List			profArray[numOn] = p;			boxArray[numOn].text = (p.getPerson()+"("+p.getCredits()+")");						//Updates Guest Marker			if(p.isGuest()){				foundArray[numOn].gotoAndStop("no");				foundArrayNum[numOn] = 3;			}			else {				foundArray[numOn].gotoAndStop("yes");				foundArrayNum[numOn] = 2;			}						//Checks if list is full			numOn++;			if(numOn == 20){				isFull = true;			}		}				//Remove from list		public function dequeue():Profile {			//Profile to Remove			tempProf = profArray[0];			//Shift everything up			for(tempInt = 0; tempInt < numOn+1; tempInt++){				profArray[tempInt] = profArray[tempInt+1];				boxArray[tempInt].text = boxArray[tempInt+1].text;				foundArray[tempInt].gotoAndStop(foundArrayNum[tempInt+1]);				foundArrayNum[tempInt] = foundArrayNum[tempInt+1];			}			//update values			numOn--;			isFull = false;			return tempProf;		}				//Finds first open text box		public function nextOpen():TextField {			return boxArray[numOn];		}				//Checks if minimum number of players are signed up		//to be able to start a game -		//(4 if first game of night, 2 if winner stays)		public function isReady(numPlayers:int):Boolean {			if (numPlayers == 2){				if(boxArray[1].text == ""){					return false;				}				else {					return true;				}			}			else if (numPlayers == 4){				if(boxArray[3].text == ""){					return false;				}				else {					return true;				}			}			return false;		}				//checks if list is full (duh)		public function listFull():Boolean {			return isFull;		}	}}