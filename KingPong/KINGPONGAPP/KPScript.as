package {	import flash.display.MovieClip;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.net.*;	//import app.Cups;	import app.BPList;	import app.Profile;	import app.GController;	public class KPScript extends MovieClip {		private var nextSection:String;		private var nextBG:int;		private var pone:String;		private var ptwo:String;		private var tempName:String;		private var profArray:Array;		private var guestArray:Array;		private var count:int;		private var tempProf:Profile;		private var guest:Profile;		private var q:int;				var myData:URLRequest;		var variables:URLVariables;		var loader:URLLoader;						var myLocalData:SharedObject;		//private var cups:Cups;			//Constructor		public function KPScript() {						myLocalData = SharedObject.getLocal("Working0");									focusRect = false;			nextSection="";			tempName="";			nextBG=1;			q = 0;			myData = new URLRequest("save.php");			myData.method = URLRequestMethod.POST;			loader = new URLLoader()						stage.addEventListener(KeyboardEvent.KEY_UP, pageChange);			//cups = new Cups();			readInProfs();		}				//What keyboard listens for when on main page		public function pageChange(evt:KeyboardEvent):void {			if (evt.keyCode == 80) {				nextSection="profile";			} else if (evt.keyCode == 76) {				nextSection="list";			} else if (evt.keyCode == 32){				stage.removeEventListener(KeyboardEvent.KEY_UP, pageChange);				GC.playGame();				theBList.populateList();				return;			} else if (evt.keyCode == 66) {				if (nextBG==4) {					nextBG=1;				} else {					nextBG++;				}				BG.gotoAndStop(nextBG);				return;			} else {				return;			}			play();		}		//When on profile page		function formPage(evt:KeyboardEvent):void {			//Press escape			if (evt.keyCode==27) {				nextSection="home";				signUpBox.nameTB.text = "";				signUpBox.pwordTB.text = "";				signUpBox.rpwordTB.text = "";				stage.removeEventListener(KeyboardEvent.KEY_UP, formPage);				stage.addEventListener(KeyboardEvent.KEY_UP, pageChange);				stage.focus = stage;				play();			}						//Press space			else if (evt.keyCode==32) {				stage.focus = stage;				tempName = signUpBox.nameTB.text;								//Checks if not already taken				if(profNameExists(tempName) == -1){					tempProf = new Profile(true, true, "", "", 0, 0, 0);					tempProf.setPerson(tempName);					profArray[profArray.length] = tempProf;					signUpBox.found.gotoAndStop("maybe");					stage.removeEventListener(KeyboardEvent.KEY_UP, formPage);					stage.focus = signUpBox.pwordTB;					stage.addEventListener(KeyboardEvent.KEY_UP, enterPword);				}				else {					signUpBox.found.gotoAndPlay("no");					signUpBox.nameTB.text = "";					stage.focus = signUpBox.nameTB;				}			}						else {				return;			}		}				function enterPword(evt:KeyboardEvent):void {			if (evt.keyCode==32) {				if (signUpBox.pwordTB.text != " "){					pone = signUpBox.pwordTB.text;					stage.removeEventListener(KeyboardEvent.KEY_UP, enterPword);					stage.focus = signUpBox.rpwordTB;					stage.addEventListener(KeyboardEvent.KEY_UP, confirmPword)				}				else {					signUpBox.pwordTB.text = "";					stage.focus = signUpBox.pwordTB;				}			}		}				function confirmPword(evt:KeyboardEvent):void {			if (evt.keyCode==32) {				if (signUpBox.rpwordTB.text == pone){					ptwo = signUpBox.rpwordTB.text;					stage.removeEventListener(KeyboardEvent.KEY_UP, confirmPword);					stage.focus = stage;					stage.addEventListener(KeyboardEvent.KEY_UP, oKay)					signUpBox.found.gotoAndPlay("yes");					profArray[profArray.length-1].setPass(pone);					saveProfs(profArray[profArray.length-1]);					signUpBox.nameTB.text = "";					signUpBox.pwordTB.text = "";					signUpBox.rpwordTB.text = "";				}				else {					signUpBox.pwordTB.text = "";					signUpBox.rpwordTB.text = "";					stage.focus = signUpBox.pwordTB;					stage.removeEventListener(KeyboardEvent.KEY_UP, confirmPword);					stage.addEventListener(KeyboardEvent.KEY_UP, enterPword);				}			}		}				//After entered successful profile. Waits for enter.		function oKay(evt:KeyboardEvent):void {			if (evt.keyCode==13) {				nextSection="home";				stage.removeEventListener(KeyboardEvent.KEY_UP, oKay);				saveProfs(profArray[profArray.length-1]);				stage.addEventListener(KeyboardEvent.KEY_UP, pageChange);				play();			}		}						//On List Page		function listPage(evt:KeyboardEvent):void {			//Press space			if (evt.keyCode==32){				if(!theList.isFull()){					tempName = theList.getInput();					if(tempName != " "){						count = profNameExists(tempName)						if(count != -1){							theList.enqueue(profArray[count]);						}						else {							guest = new Profile(false, true, "", "", 0, 0, 0);							guest.setPerson(tempName);							theList.enqueue(guest);						}					}					else{						theList.clearCurrentInput();					}				}				stage.focus = theList.ib;				theBList.populateList();			}			//press escape			else if (evt.keyCode==27) {				nextSection="home";				stage.removeEventListener(KeyboardEvent.KEY_UP, listPage);				stage.addEventListener(KeyboardEvent.KEY_UP, pageChange);				theList.clearCurrentInput();				stage.focus = stage;				play();			}			else {				return;			}		}						function readInProfs():void{			/*			profArray = new Array();						if (myLocalData.data.profs[profArray.length] != undefined)			{				// The SharedObject exists so display the data				profArray[profArray.length] = myLocalData.data.profs[profArray.length];				trace(profArray[0].getPerson());			}			else			{				trace("There is no Shared Object saved");			}			///*/			/*			profArray = new Array();			if(myLocalData.data.numba != undefined){				q = myLocalData.data.numba;				for(var i:int = 0; i < q; i++){					profArray[i] = new Profile(true, false, myLocalData.data.Person[i], myLocalData.data.PWord[i], myLocalData.data.Wins[i], myLocalData.data.Losses[i], myLocalData.data.Credits[i]);				}			}						//*/			/*			profArray = new Array();			if(myLocalData.data.profsAr != undefined){				//profArray = myLocalData.data.profsA.slice();				for(var i:int = 0; i < myLocalData.data.profsAr.length; i++){					profArray[i] = new Profile(true, false, myLocalData.data.profsAr[i].getPerson(), myLocalData.data.profsAr[i].getPass(), myLocalData.data.profsAr[i].getWins(), myLocalData.data.profsAr[i].getLosses(), myLocalData.data.profsAr[i].getCreds());				}			}			return;			//*/			profArray = new Array();			if(myLocalData.data.Persons != undefined){				for(count = 0; count < myLocalData.data.Persons.length; count++){					profArray[count] = new Profile(true, false, myLocalData.data.Persons[count], myLocalData.data.pWords[count], myLocalData.data.Wins[count], myLocalData.data.Losses[count], myLocalData.data.Credits[count]);				}			}			return;		}				function profNameExists(tName:String):int {			for(count = 0; count < profArray.length; count++){				if (profArray[count].getPerson() == tName){					return count;				}			}			return -1;		}		function saveProfs(prof:Profile){			/*for(count = 0; count < profArray.length; count++){				variables.Person = profArray[count].getPerson();				variables.PWord = profArray[count].getPass();				variables.Wins = profArray[count].getWins();				variables.Losses = profArray[count].getLosses();				variables.Credits = profArray[count].getCreds();				myData.data += variables;			}			//*/			/*			trace(prof.getPerson());			trace(prof.getPass());			trace(prof.getWins());			trace(prof.getLosses());			trace(prof.getCreds());			//*/						/*			variables = new URLVariables();			variables.Person = prof.getPerson();			variables.PWord = prof.getPass();			variables.Wins = prof.getWins();			variables.Losses = prof.getLosses();			variables.Credits = prof.getCreds();			myData.data = variables;			loader.dataFormat = URLLoaderDataFormat.VARIABLES;			loader.load(myData);			//*/									/*			myLocalData.data.Person = prof.getPerson();			myLocalData.data.PWord = prof.getPass();			myLocalData.data.Wins = prof.getWins();			myLocalData.data.Losses = prof.getLosses();			myLocalData.data.Credits = prof.getCreds();			// The next line writes the object to a local file			myLocalData.flush(); 			// Get data in the SharedObject, we do a check to see if it exists			// because the first time the code runs there is no shared object			// saved on the disk and it would cause a problem			if (myLocalData.data.Person != undefined)			{				// The SharedObject exists so display the data				trace(myLocalData.data.Person);			}			else			{				// There is no SharedObject so display a warning				trace("There is no Shared Object saved");			} 			// If you want to delete the Shared Object from the local disk			// Use the following line.			//myLocalData.clear();						//*/						//myLocalData.data.profs[profArray.length-1] = profArray[profArray.length-1];			//myLocalData.flush();						/*			myLocalData.data.Person[q] = prof.getPerson();			myLocalData.data.PWord[q] = prof.getPass();			myLocalData.data.Wins[q] = prof.getWins();			myLocalData.data.Losses[q] = prof.getLosses();			myLocalData.data.Credits[q] = prof.getCreds();			q++;			myLocalData.data.numba = q;			// The next line writes the object to a local file			myLocalData.flush();			//*/			//for(var i:int = 0; i < profArray.length; i++){				//myLocalData.data.profsAr[i] = new Profile(true, false, profArray[i].getPerson(), profArray[i].getPass(), profArray[i].getWins(), profArray[i].getLosses(), profArray[i].getCreds())			//}			//myLocalData.data.profsA = profArray.slice();			//myLocalData.flush();			myLocalData.data.Persons = new Array();//profArray;			myLocalData.data.pWords = new Array();			myLocalData.data.Credits = new Array();			myLocalData.data.Wins = new Array();			myLocalData.data.Losses = new Array();			for(count = 0; count < profArray.length; count++){				myLocalData.data.Persons[count] = profArray[count].getPerson();				myLocalData.data.pWords[count] = profArray[count].getPass();				myLocalData.data.Credits[count] = profArray[count].getCreds();				myLocalData.data.Wins[count] = profArray[count].getWins();				myLocalData.data.Losses[count] = profArray[count].getLosses();			}			myLocalData.flush();					}	}}